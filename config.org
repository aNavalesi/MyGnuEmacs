* Emacs config
My Gnu emacs config, the worst literate config you've ever seen
** straight.el 
   Package manager for emacs that seems based.
   #+BEGIN_SRC emacs-lisp
   (load-file "~/.emacs.d/straight.el/bootstrap.el")
   (kill-buffer "*straight-process*")
   #+end_src
** Interface basic config
   Make emacs interface better
   #+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   (scroll-bar-mode -1)
   (tool-bar-mode -1)
   (tooltip-mode -1)
   (set-fringe-mode 10)
   (menu-bar-mode -1)
   (set-face-attribute 'default nil :font "dejavu sans mono" :height 120)
   (load-theme 'doom-dracula t)
   #+end_src
** Better text buffer modes 
   evil, global-display-line-numbers and smartparens are quite useful for text editing
  #+begin_src emacs-lisp
  (require 'smartparens-config)
  (require 'smartparens)
  (smartparens-global-mode t)
  (evil-mode)
  (global-display-line-numbers-mode t)
  #+end_src
** Which Key
   Pkg that displays possible keybindings after you press SPC, C or M
   #+begin_src emacs-lisp
   (use-package which-key
  :straight t)
   (require 'which-key)
   (which-key-mode)
   #+end_src
** Kill message buffer at startup
   self explanatory headline
   #+begin_src emacs-lisp
   (setq-default message-log-max nil)
   (kill-buffer "*Messages*")
   #+end_src
** Desktop (exwm) config
   (delete this if you don't want to have emacs window manager (i know it's not an heavily configured exwm but i'm ok whith that (this looks like a lisp expression)))
*** Start exwm
    #+begin_src emacs-lisp
    (require 'exwm)
    (require 'exwm-config)
    (exwm-config-default)
    #+end_src
*** App launcher
    an app launcher for emacs (there is also dmenu)
    #+begin_src emacs-lisp
    (load-file "~/.emacs.d/app-launcher.el")
    (use-package dmenu :straight t)
    #+end_src
*** exwm keys
    Some keybindings to do some desktop stuff from exwm (dont @ me)
    #+begin_src emacs-lisp
    (exwm-input-set-key (kbd "s-a") 'app-launcher-run-app)
    (exwm-input-set-key (kbd "<XF86AudioPlay>") 'desktop-environment-toggle-music)
    (exwm-input-set-key (kbd "<XF86Explorer>") 'ivy-switch-buffer)
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") 'desktop-environment-volume-increment)
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") 'desktop-environment-volume-decrement)
    (exwm-input-set-key (kbd "<XF86AudioMute>") 'desktop-environment-toggle-mute)
    (exwm-input-set-key (kbd "<XF86AudioMicMute>") 'desktop-environment-toggle-microphone-mute)
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") 'desktop-environment-brightness-decrement-slowly)
    (exwm-input-set-key (kbd "<XF86Search>") 'swiper)
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") 'desktop-environment-brightness-increment-slowly)
    (exwm-input-set-key (kbd "s-<return>") 'ansi-term)
    (exwm-input-set-key (kbd "s-d") 'dmenu)
    (exwm-input-set-key (kbd "<XF86LaunchA>") 'dmenu)
    (exwm-input-set-key (kbd "s-e <return>") 'eshell)
    (exwm-input-set-key (kbd "s-e p") 'proced)
    (exwm-input-set-key (kbd "s-t")'exwm-layout-toggle-fullscreen)
    (exwm-input-set-key (kbd "s-m") 'exwm-layout-toggle-mode-line)
    (exwm-input-set-key (kbd "s-e f") 'elfeed)
    (exwm-input-set-key (kbd "s-e m") 'emms-play-file)
    (exwm-input-set-key (kbd "s-x") 'counsel-M-x)
    (exwm-input-set-key (kbd "s-q") 'kill-current-buffer)
    (exwm-input-set-key (kbd "s-b") 'ivy-switch-buffer)
    (exwm-input-set-key (kbd "s-o") 'other-window)
    (exwm-input-set-key (kbd "s-n") 'next-buffer)
    (exwm-input-set-key (kbd "s-p") 'previous-buffer)
    (exwm-input-set-key (kbd "s-f") 'delete-other-windows)
    (exwm-input-set-key (kbd "s-z") 'exwm-workspace-move-window)
    (exwm-input-set-key (kbd "s-c") 'exwm-input-release-keyboard)
    (exwm-input-set-key (kbd "s-SPC") 'exwm-floating-toggle-floating)
    (exwm-input-set-key (kbd "<print>") 'desktop-environment-screenshot)
    #+end_src
*** Desktop environment
    A based package to interact with audio, video and network in emacs
    #+begin_src emacs-lisp
    (use-package desktop-environment :straight t)
    (setq desktop-environment-screenshot-directory "~/media/pix/screens") 
    #+end_src
*** workspaces
    some stuff for workspaces
    #+begin_src emacs-lisp
    (setq exwm-workspace-number 4)
    (easy-menu-define exwm-workspace-menu nil
    "Menu for Exwm Workspace.
    Also used in `exwm-mode-line-workspace-map'."
    '("Exwm Workspace"
    ["Add workspace" exwm-workspace-add]
    ["Delete current workspace" exwm-workspace-delete]
    ["Move workspace to" exwm-workspace-move]
    ["Swap workspaces" exwm-workspace-swap]
    ["Move X window to" exwm-workspace-move-window]
    ["Move X window from" exwm-workspace-switch-to-buffer]
    ["Toggle minibuffer" exwm-workspace-toggle-minibuffer]
    ["Switch workspace" exwm-workspace-switch]
    ("Switch to" :filter
    (lambda (&rest _args)
    (mapcar (lambda (i)
    `[,(format "workspace %d" i)
    (lambda ()
    (interactive)
    (exwm-workspace-switch ,i))
    (/= ,i exwm-workspace-current-index)])
    (number-sequence 0 (1- (exwm-workspace--count))))))))
    (defvar exwm-mode-line-workspace-map
    (let ((map (make-sparse-keymap)))
    (define-key map [mode-line mouse-1] 'exwm-workspace-switch)
    (define-key map [mode-line mouse-3] exwm-workspace-menu)
    map)
  "Local keymap for EXWM mode line string.  See `exwm-mode-line-format'.")
  (defcustom exwm-mode-line-format
  `("["
  (:propertize (:eval (format "WS-%d" exwm-workspace-current-index))
  local-map ,exwm-mode-line-workspace-map
  face bold
  mouse-face mode-line-highlight
  help-echo "mouse-1: Switch to / add / delete to EXWM workspaces.
  mouse-2: EXWM Workspace menu.
  ")
  "]")
  "EXWM workspace in the mode line."
  :type 'sexp)
  (add-to-list 'mode-line-misc-info exwm-mode-line-format t) 
    #+end_src
*** Other stuff
    put battery and date on the bar, set workspaces number, set char mode as default, run some x commands and kill their shell output (yes, i do switch ctrl and caps)
    #+begin_src emacs-lisp
    (display-battery-mode)
    (display-time-mode)
    (shell-command (concat "xset r rate 145 "))
    (shell-command "setxkbmap -option ctrl:nocaps")
    (kill-buffer "*Shell Command Output*")
    (delete-other-windows)
    #+end_src
** Ivy & counsel
   ivy is a completion framework for emacs, i use it
   #+begin_src emacs-lisp
   (use-package counsel
   :straight t
   :custom
   (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
   :config
   (counsel-mode 1))
   
   (use-package ivy-rich
   :straight t
   :after ivy
   :init
   (ivy-rich-mode 1))
   (use-package ivy
   :diminish
   :straight t
   :bind (("C-s" . swiper)
   :map ivy-minibuffer-map
   ("TAB" . ivy-partial-or-done) 
   ("C-l" . ivy-alt-done)
   ("C-j" . ivy-next-line)
   ("C-k" . ivy-previous-line)
   :map ivy-switch-buffer-map
   ("C-k" . ivy-previous-line)
   ("C-l" . ivy-done)
   ("C-d" . ivy-switch-buffer-kill)
   :map ivy-reverse-i-search-map
   ("C-k" . ivy-previous-line)
   ("C-d" . ivy-reverse-i-search-kill))
   :config
   (ivy-mode 1))
   (ivy-mode)
   #+end_src
** Helpful
   help package that is yes
   #+begin_src emacs-lisp
   (use-package helpful
   :straight t)
   #+end_src
** Doom-modeline
   Modeline that is a lot better looking than emacs default.
   #+begin_src emacs-lisp
   (use-package doom-modeline
   :straight t
   :init (doom-modeline-mode 1))
   #+end_src
** evil
   Emacs keybindings suck , evil is the answer (general.el is useful too tho) (not configured ):
   #+begin_src emacs-lisp
   (use-package evil
   :straight t)
   #+end_src
** doom-themes
   themes and color schemes, with doom modeline, they make emacs good look 
   #+begin_src emacs-lisp
   (use-package doom-themes
   :straight t)
   #+end_src
** Parens editing
   plugins to not get confused when using many parentheses ((((((((((((((((((((((hold (my (lisp))))))))))))))))))))))))
   #+begin_src emacs-lisp
   (use-package highlight-parentheses
   :straight t)
   (use-package smartparens
   :straight t)
   (use-package paredit
   :straight t)
   #+end_src
** Emms
   Emacs media payer based on mpv, why not?
   #+begin_src emacs-lisp
   (use-package emms
   :straight t
   :config
   (require 'emms-setup)
   (emms-all)
   (emms-default-players)
   (setq emms-source-file-default-directory "~/media/music/")
   (setq emms-playlist-buffer-name "*Music*")
   (setq emms-info-asynchronously t)
   ;(require 'emms-info-libtag) ;;; load functions that will talk to emms-print-metadata which in turn talks to libtag and gets metadata
   (setq emms-info-functions '(emms-info-libtag)) ;;; make sure libtag is the only thing delivering metadata
   (require 'emms-mode-line)
   (emms-mode-line 1)
   (require 'emms-playing-time)
   (emms-playing-time 1))
   #+end_src
** Undo tree 
   since emacs and evil undos are dangerous, undo tree mode is very good
   #+begin_src emacs-lisp
   (use-package undo-tree :straight t)
   #+end_src
** Org bullets & co
    Make org mode docs look better
    #+begin_src emacs-lisp
    (use-package org-bullets
    :straight t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
    (add-hook 'org-mode-hook (lambda ()
    "Beautify Org Checkbox Symbol"
    (push '("[ ]" .  "☐") prettify-symbols-alist)
    (push '("[X]" . "☑" ) prettify-symbols-alist)
    (push '("[-]" . "❍" ) prettify-symbols-alist)
    (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
    (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
    (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
    (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
    (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
    (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
    (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
    (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
    (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
    (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
    (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
    (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
    (prettify-symbols-mode)))
    #+end_src
** Pdf
   Useful if you want to use emacs for pdf reading
   #+begin_src emacs-lisp
   (use-package pdf-tools
   :defer t
   :straight t
   :mode (("\\.pdf\\'" . pdf-view-mode))
   :config
   (pdf-tools-install))  
   #+end_src
** Icons
   icons
   #+begin_src emacs-lisp
   (use-package all-the-icons
   :straight t)
   #+end_src
** Elfeed
   emacs feed reader
   #+begin_src emacs-lisp
   (use-package elfeed
   :straight t)
   (use-package elfeed-goodies :straight t)
   (setq elfeed-feeds
   '("https://ww.reddit.com/r/emacs.rss"
   "https://ww.reddit.com/r/linux.rss"
   "https://ww.reddit.com/r/news.rss"
   "https://ww.reddit.com/r/technology.rss"
   "https://ww.reddit.com/r/programming.rss"
   "https://ww.reddit.com/r/politics.rss"
   "https://ww.reddit.com/r/italy.rss"
   ))
   (add-hook 'elfeed-search-mode-hook 'elfeed-goodies/setup)
   #+end_src
** geiser
   repl and other stuff for scheme
   #+begin_src emacs-lisp
   (use-package geiser
   :bind ("C-c l" . geiser-repl-clear-buffer)
   :straight t)
   (straight-use-package 'geiser-chicken)
   (straight-use-package 'geiser-guile)
   #+end_src
** Magit
   ultra based git client for emacs
   #+begin_src emacs-lisp
   (use-package magit
   :straight t)
   #+end_src
** Hooks
   activate some modes when activating other modes
   #+begin_src emacs-lisp
   (add-hook 'scheme-mode-hook 'paredit-mode)
   (add-hook 'scheme-mode-hook 'highlight-parentheses-mode)
   (add-hook 'scheme-mode-hook 'auto-complete-mode)
   (add-hook 'emacs-lisp-mode-hook 'paredit-mode 'highlight-parentheses-mode)
   (add-hook 'emacs-lisp-mode-hook 'highlight-parentheses-mode)
   (add-hook 'emacs-lisp-mode-hook 'auto-complete-mode)
   (add-hook 'emacs-lisp-mode 'undo-tree-mode)
   (add-hook 'org-mode-hook 'undo-tree-mode)
   (add-hook 'scheme-mode-hook 'undo-tree-mode)
   (add-hook 'text-mode-hook 'undo-tree-mode)
   (add-hook 'sh-mode-hook 'undo-tree-mode)
   (add-hook 'markdown-mode-hook 'ispell-minor-mode)
   (add-hook 'markdown-mode-hook 'pandoc-mode)
   (add-hook 'org-mode-hook 'ispell-minor-mode)
   (add-hook 'text-mode-hook 'ispell-minor-mode)
   #+end_src
** general kb
   some SPC /comfy/ keybindings
*** Evil
    good undoo and c-u scroll up
    #+begin_src emacs-lisp
    (define-key evil-normal-state-map (kbd "u") 'undo-tree-visualize)
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    #+end_src
*** org-bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC o"
    :non-normal-prefix "M-SPC"
    :prefix-command 'org-command
    :prefix-map 'org-map
    "RET" 'org-mode
    "t" 'org-insert-todo-heading
    "x" 'org-toggle-checkbox
    "s" 'org-schedule
    "a" 'org-agenda
    "n" 'org-insert-subheading
    "p" 'org-tree-slide-mode
    "e" 'org-export-dispatch)
    #+end_src
*** app bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC a"
    :non-normal-prefix "M-SPC"
    :prefix-command 'apps-command 
    :prefix-map 'apps-map
    "m" 'magit
    "f" 'elfeed
    "r" 'erc
    "m" 'emms
    "h" 'shell
    "t" 'ansi-term
    "g" 'geiser
    "p" 'proced)
    #+end_src
*** files bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC f"
    :non-normal-prefix "M-SPC"
    :prefix-command 'files-command
    :prefix-map 'files-map
    "f" 'find-file
    "x" 'counsel-M-x
    "d" 'dired
    "e" 'eval-buffer
    "l" 'load-file
    "s" 'save-buffer
    "t" 'load-theme
    "i" 'projectile-find-file
    "p" 'pandoc-output-format-slide-show-hydra/body)
    #+end_src
*** buffer bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC b"
    :non-normal-prefix "M-SPC"
    :prefix-command 'buffer-command
    :prefix-map 'buffer-map
    "k" 'kill-current-buffer
    "h" 'split-window-below
    "v" 'split-window-right
    "f" 'delete-other-windows
    "o" 'other-window
    "q" 'save-buffers-kill-terminal
    "b" 'ivy-switch-buffer
    "+" 'enlarge-window-horizontally 
    "-" 'shrink-window-horizontally
    "p" 'previous-buffer
    "n" 'next-buffer)
    #+end_src
*** web bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC w"
    :non-normal-prefix "M-SPC"
    :prefix-command 'web-command
    :prefix-map 'web-map
    "b" 'elfeed-search-browse-url
    "u" 'elfeed-update
    "m" 'magit
    "c" 'magit-clone)
    #+end_src
*** media bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC m"
    :non-normal-prefix "M-SPC"
    :prefix-command 'media-command
    :prefix-map 'media-map
    "RET" 'emms
    "f" 'emms-play-file
    "p" 'emms-pause
    "s" 'emms-stop
    "u" 'emms-play-url
    "n" 'emms-next
    "r" 'emms-previous)
    #+end_src
** ispell
   spell checker that i got working with italian and i'm quite fine with it.
   #+begin_src emacs-lisp
   (setq-default ispell-program-name "aspell")
   #+end_src
** not related stuff
   #+begin_src emacs-lisp
   (setq org-agenda-files '("~/.emacs.d/agenda.org"))
   #+end_src
** Todo
   is it cringe to put what i would like to add to this config
*** TODO eshell config
*** TODO better org mode config
