* Emacs config
  My Gnu emacs config, the worst literate config you've ever seen
** straight.el 
   Package manager for emacs that seems based.
   #+BEGIN_SRC emacs-lisp
   (load-file "~/.emacs.d/straight.el/bootstrap.el")
   (kill-buffer "*straight-process*")
   #+end_src
** use-package
   macro for package configuration
   #+begin_src emacs-lisp
   (straight-use-package 'use-package)
   #+end_src
** Interface basic config
   Make emacs interface better
   #+begin_src emacs-lisp
       (setq inhibit-startup-message t)
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       (tooltip-mode -1)
       (set-fringe-mode 10)
;;       (menu-bar-mode -1)
       (set-face-attribute 'default nil :font "dejavu sans mono" :height 120)
   #+end_src
** Delete backup files
   i don't want your backup files emacs
   #+begin_src emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+end_src
** y | n alias
   yes is too long
   #+begin_src emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Parens editing
   plugins to not get confused when using many parentheses ((((((((((((((((((((((hold (my (lisp))))))))))))))))))))))))
   #+begin_src emacs-lisp
     (use-package highlight-parentheses
	 :straight t)
     (use-package smartparens
	 :straight t)
     (use-package paredit
	 :straight t
	 :hook (scheme-mode . paredit-mode)
	 :hook (lisp-mode . paredit-mode)
	 :hook (emacs-lisp-mode . paredit-mode))
   #+end_src
** Which Key
   Pkg that displays possible keybindings after you press SPC, C or M
   #+begin_src emacs-lisp
   (use-package which-key
  :straight t)
   (require 'which-key)
   (which-key-mode)
   #+end_src
** evil
   Emacs keybindings suck , evil is the answer (general.el is useful too tho) (not configured ):
   #+begin_src emacs-lisp
   (use-package evil
   :straight t)
   #+end_src
** Kill message buffer at startup
   self explanatory headline
   #+begin_src emacs-lisp
   (setq-default message-log-max nil)
   (kill-buffer "*Messages*")
   #+end_src
** Better text buffer modes 
   evil, global-display-line-numbers and smartparens are quite useful for text editing
  #+begin_src emacs-lisp
    (require 'smartparens-config)
    (require 'smartparens)
    (smartparens-global-mode t)
    (evil-mode)
    (global-highlight-parentheses-mode)
    (global-display-line-numbers-mode t)
  #+end_src
** Ivy & counsel
   ivy is a completion framework for emacs, i use it
   #+begin_src emacs-lisp
	  (use-package counsel
	  :straight t
	  :custom
	  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
	  :config
	  (counsel-mode 1))
	  (use-package all-the-icons-ivy-rich :straight t)
	  (all-the-icons-ivy-rich-mode)
	  (use-package ivy-rich
	  :straight t
	  :after ivy
	  :init
	  (ivy-rich-mode 1))
	  (use-package ivy
	  :diminish
	  :straight t
	  :bind (("C-s" . swiper)
	  :map ivy-minibuffer-map
	  ("TAB" . ivy-partial-or-done) 
	  ("C-l" . ivy-alt-done)
	  ("C-j" . ivy-next-line)
	  ("C-k" . ivy-previous-line)
	  :map ivy-switch-buffer-map
	  ("C-k" . ivy-previous-line)
	  ("C-l" . ivy-done)
	  ("C-d" . ivy-switch-buffer-kill)
	  :map ivy-reverse-i-search-map
	  ("C-k" . ivy-previous-line)
	  ("C-d" . ivy-reverse-i-search-kill))
	  :config
	  (ivy-mode 1))
	  (ivy-mode)
	  (use-package ivy-posframe :straight t)
          (ivy-posframe-mode)
   #+end_src
** Helpful
   help package that is yes
   #+begin_src emacs-lisp
   (use-package helpful
   :straight t)
   #+end_src
** Doom-modeline
   Modeline that is a lot better looking than emacs default.
   #+begin_src emacs-lisp
   (use-package doom-modeline
   :straight t
   :init (doom-modeline-mode 1))
   #+end_src
** doom-themes
   themes and color schemes, with doom modeline, they make emacs good look 
   #+begin_src emacs-lisp
   (use-package doom-themes
   :straight t)
   (load-theme 'doom-gruvbox t)
   #+end_src
** Emms
   Emacs media payer based on mpv, why not?
   #+begin_src emacs-lisp
   (use-package emms
   :straight t
   :config
   (require 'emms-setup)
   (emms-all)
   (emms-default-players)
   (setq emms-source-file-default-directory "~/media/music/")
   (setq emms-playlist-buffer-name "*Music*")
   (setq emms-info-asynchronously t)
   ;(require 'emms-info-libtag) ;;; load functions that will talk to emms-print-metadata which in turn talks to libtag and gets metadata
   (setq emms-info-functions '(emms-info-libtag)) ;;; make sure libtag is the only thing delivering metadata
   (require 'emms-mode-line)
   (emms-mode-line 1)
   (require 'emms-playing-time)
   (emms-playing-time 1))
   #+end_src
** Undo tree 
   since emacs and evil undos are dangerous, undo tree mode is very good
   #+begin_src emacs-lisp
   (use-package undo-tree :straight t)
   (global-undo-tree-mode)
   #+end_src
** Org bullets & co
    Make org mode docs look better
    #+begin_src emacs-lisp
      (use-package org-bullets
      :straight t
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
      (add-hook 'org-mode-hook (lambda ()
      "Beautify Org Checkbox Symbol"
      (push '("[ ]" .  "☐") prettify-symbols-alist)
      (push '("[X]" . "☑" ) prettify-symbols-alist)
      (push '("[-]" . "❍" ) prettify-symbols-alist)
      (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
      (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
      (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
      (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
      (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
      (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
      (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
      (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
      (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
      (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
      (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
      (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
      (prettify-symbols-mode)))
    #+end_src
** dired-icons
   icons in emacs file manager
   #+begin_src emacs-lisp
     (use-package all-the-icons-dired
       :straight t)
     (hook (dired-mode . all-the-icons-dired-mode))
   #+end_src
** Pdf
   Useful if you want to use emacs for pdf reading
   #+begin_src emacs-lisp
   (use-package pdf-tools
   :defer t
   :straight t
   :mode (("\\.pdf\\'" . pdf-view-mode))
   :config
   (pdf-tools-install))  
   #+end_src
** Icons
   icons
   #+begin_src emacs-lisp
   (use-package all-the-icons
   :straight t)
   #+end_src
** geiser
   repl and other stuff for scheme
   #+begin_src emacs-lisp
   (use-package geiser
   :bind ("C-c l" . geiser-repl-clear-buffer)
   :straight t)
   (straight-use-package 'geiser-guile)
   (straight-use-package 'racket-mode)
   #+end_src
** slime
   common lisp good plugin yes
   #+begin_src emacs-lisp
   (use-package slime :straight t)
   (setq inferior-lisp-program "sbcl")
   #+end_src
** erc
   emacs irc client
   #+begin_src emacs-lisp
   (setq erc-server "irc.libera.chat" erc-nick "nava")
   #+end_src
** Elfeed
   emacs feed reader
   #+begin_src emacs-lisp
	(use-package elfeed
         :straight t)
	(use-package elfeed-goodies :straight t)
	(setq elfeed-feeds
	'("https://ww.reddit.com/r/emacs.rss"
	"https://ww.reddit.com/r/linux.rss"
	"https://ww.reddit.com/r/news.rss"
	"https://ww.reddit.com/r/technology.rss"
	"https://ww.reddit.com/r/programming.rss"
	"https://ww.reddit.com/r/politics.rss"
	"https://ww.reddit.com/r/italy.rss"
	))
	(add-hook 'elfeed-search-mode-hook 'elfeed-goodies/setup)
   #+end_src
** q4
   strange reddit client (4chan)
   #+begin_src emacs-lisp
   (load "~/.emacs.d/q4.el")
   #+end_src
** Magit
   ultra based git client for emacs
   #+begin_src emacs-lisp
   (use-package magit
   :straight t)
   #+end_src
** reload config
   function to reload config
   #+begin_src emacs-lisp
   (defun reload-config () (load-file "~/.emacs.d/init.el") (interactive))
   #+end_src
** general kb
   some SPC /comfy/ keybindings
*** install
  #+begin_src emacs-lisp
  (use-package general :straight t)
  #+end_src
*** Evil
    good undoo and c-u scroll up
    #+begin_src emacs-lisp
      (define-key evil-normal-state-map (kbd "u") 'undo-tree-visualize)
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    #+end_src
*** generic bindings
    #+begin_src emacs-lisp
      (general-define-key :keymaps '(normal insert emacs)
      :non-normal-prefix "M-SPC"
	:prefix "SPC"
	  "x" 'counsel-M-x
	  "SPC" 'find-file
	  "k" 'kill-current-buffer 
          "s" 'save-buffer 


 
	    )

    #+end_src
*** org-bindings
    #+begin_src emacs-lisp
      (defun org-literate () (paredit-mode) (ispell-minor-mode -1) (interactive)) ;; function to use org mode for programming
      (general-define-key
      :keymaps '(normal insert emacs)
      :prefix "SPC o"
      :non-normal-prefix "M-SPC"
      :prefix-command 'org-command
      :prefix-map 'org-map
      "RET" 'org-mode
      "l" 'org-literate
      "t" 'org-babel-tangle
      "t" 'org-insert-todo-heading
      "x" 'org-toggle-checkbox
      "s" 'org-schedule
      "a" 'org-agenda
      "n" 'org-insert-subheading
      "e" 'org-export-dispatch)
    #+end_src
*** files bindings
    #+begin_src emacs-lisp
      (general-define-key
      :keymaps '(normal insert emacs)
      :prefix "SPC f"
      :non-normal-prefix "M-SPC"
      :prefix-command 'files-command
      :prefix-map 'files-map
      "d" 'dired
      "c" 'count-words
      "i" 'ispell-buffer
      "e" 'eval-buffer
      "l" 'load-file
      "s" 'save-buffer
      "t" 'load-theme
      "j" 'projectile-find-file
      "p" 'pandoc-output-format-slide-show-hydra/body)
    #+end_src
*** buffer bindings
    #+begin_src emacs-lisp
      (general-define-key
      :keymaps '(normal insert emacs)
      :prefix "SPC b"
      :non-normal-prefix "M-SPC"
      :prefix-command 'buffer-command
      :prefix-map 'buffer-map
      "k" 'kill-current-buffer
      "h" 'split-window-below
      "v" 'split-window-right
      "f" 'delete-other-windows
      "o" 'other-window
      "q" 'save-buffers-kill-terminal
      "b" 'ivy-switch-buffer
      "+" 'enlarge-window-horizontally 
      "-" 'shrink-window-horizontally
      "p" 'previous-buffer
      "n" 'next-buffer)
    #+end_src
*** web bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC w"
    :non-normal-prefix "M-SPC"
    :prefix-command 'web-command
    :prefix-map 'web-map
    "b" 'elfeed-search-browse-url
    "u" 'elfeed-update
    "m" 'magit
    "f" 'elfeed
    "r" 'erc
    "c" 'magit-clone
    "4" 'q4/browse-board)
    #+end_src
*** media bindings
    #+begin_src emacs-lisp
    (general-define-key
    :keymaps '(normal insert emacs)
    :prefix "SPC m"
    :non-normal-prefix "M-SPC"
    :prefix-command 'media-command
    :prefix-map 'media-map
    "RET" 'emms
    "f" 'emms-play-file
    "p" 'emms-pause
    "s" 'emms-stop
    "u" 'emms-play-url
    "n" 'emms-next
    "r" 'emms-previous)
    #+end_src
** ispell
   spell checker that i got working with italian and i'm quite fine with it.
   #+begin_src emacs-lisp
     (setq-default ispell-program-name "aspell")
     (add-hook 'markdown-mode-hook 'ispell-minor-mode)
     (add-hook 'org-mode-hook 'ispell-minor-mode)
     (add-hook 'text-mode-hook 'ispell-minor-mode)

   #+end_src
** Server
   start emacs daemon
   #+begin_src emacs-lisp
  (require 'server)
  (server-force-delete)
  (server-start)
   #+end_src
** projectile
   framework for dealing with projects
   #+begin_src emacs-lisp
   (use-package projectile :straight t)
   #+end_src
** not related stuff
   #+begin_src emacs-lisp
  (straight-use-package 'markdown-mode)
  (straight-use-package 'nix-mode)
  (use-package pandoc-mode
  :straight t
  :hook (markdown-mode . pandoc-mode))
  (setq org-agenda-files '("~/.emacs.d/agenda.org"))
   #+end_src
** Todo
   is it cringe to put what i would like to add to this config
*** TODO eshell config
*** TODO better org mode config
