#+begin_src emacs-lisp
(require 'exwm)
(require 'exwm-config)
(exwm-config-default)
;;(load "~/.emacs.d/desktop.el")
;;(load "~/.emacs.d/use-package.el")
;;(load "~/.emacs.d/hooks.el")
;;(load "~/.emacs.d/bindings.el")
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)
(set-face-attribute 'default nil :font "dejavu sans mono" :height 120)

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("0a41da554c41c9169bdaba5745468608706c9046231bbbc0d155af1a12f32271" "7a994c16aa550678846e82edc8c9d6a7d39cc6564baaaacc305a3fdc0bd8725f" "4a8d4375d90a7051115db94ed40e9abb2c0766e80e228ecad60e06b3b397acab" "76bfa9318742342233d8b0b42e824130b3a50dcc732866ff8e47366aed69de11" "7d708f0168f54b90fc91692811263c995bebb9f68b8b7525d0e2200da9bc903c" "ca70827910547eb99368db50ac94556bbd194b7e8311cfbdbdcad8da65e803be" "f2927d7d87e8207fa9a0a003c0f222d45c948845de162c885bf6ad2a255babfd" "4bca89c1004e24981c840d3a32755bf859a6910c65b829d9441814000cf6c3d0" "e3c64e88fec56f86b49dcdc5a831e96782baf14b09397d4057156b17062a8848" "56d10d2b60685d112dd54f4ba68a173c102eacc2a6048d417998249085383da1" "e6ff132edb1bfa0645e2ba032c44ce94a3bd3c15e3929cdf6c049802cf059a2a" "aaa4c36ce00e572784d424554dcc9641c82d1155370770e231e10c649b59a074" "75b8719c741c6d7afa290e0bb394d809f0cc62045b93e1d66cd646907f8e6d43" "c4bdbbd52c8e07112d1bfd00fee22bf0f25e727e95623ecb20c4fa098b74c1bd" "e6df46d5085fde0ad56a46ef69ebb388193080cc9819e2d6024c9c6e27388ba9" "0fffa9669425ff140ff2ae8568c7719705ef33b7a927a0ba7c5e2ffcfac09b75" default))
 '(display-battery-mode t)
 '(display-time-mode t)
 '(elfeed-feeds
   '("https://ww.reddit.com/r/italy.rss" "https://ww.reddit.com/r/politics.rss" "https://ww.reddit.com/r/programming.rss" "https://ww.reddit.com/r/technology.rss" "https://ww.reddit.com/r/news.rss" "https://ww.reddit.com/r/linux.rss" "https://ww.reddit.com/r/emacs.rss" "https://www2.technologyreview.com/rss/feeds/mainrss.aspx" "https://www.corriere.it/rss/homepage_innovazione.xml" "http://xml2.corriereobjects.it/rss/scienze.xml" "http://xml2.corriereobjects.it/rss/esteri.xml" "http://xml2.corriereobjects.it/rss/politica.xml" "https://static.fsf.org/fsforg/rss/news.xml" "https://static.fsf.org/fsforg/rss/blogs.xml") t)
 '(package-selected-packages
   '(epc deferred suggest resize-window geiser-guile transmission elfeed-goodies counsel-web org-roam general pdf-tools auto-complete guix arch-packer pacmacs sx sxiv dad-joke elfeed pandoc-mode pandoc zzz-to-char undo-tree projectile helm racket-mode macrostep-geiser undo-propose lua-mode eterm-256color org-tree-slide helm-exwm ivy-rtags symon quelpa quack paredit exwm-float emms dmenu tabbar-ruler org-bullets mu4e-views evil-mu4e w3m mode-icons zenity-color-picker desktop-environment chess helpful ivy-rich counsel lsp-mode magit which-key rainbow-delimiters nix-mode doom-modeline geiser use-package sl ivy doom-themes markdown-mode exwm highlight-parentheses solarized-theme zenburn-theme evil-smartparens smartparens ## evil macrostep)))

 


(require 'smartparens-config)
(require 'smartparens)
(smartparens-global-mode t)
(load-theme 'doom-challenger-deep t)
(evil-mode)
(require 'which-key)
(global-display-line-numbers-mode t)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(which-key-mode)
(setq-default message-log-max nil)
(kill-buffer "*Messages*")
(setq org-agenda-files '("~/.emacs.d/agenda.org"))

#+end_src 

#+begin_src emacs-lisp
(use-package helpful
  :ensure t)
(use-package counsel
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

(use-package ivy-rich
  :ensure t
  :after ivy
  :init
  (ivy-rich-mode 1))
(use-package ivy
  :diminish
  :ensure t
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-partial-or-done) 
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
(ivy-mode)
(global-display-line-numbers-mode t)
(use-package which-key
  :ensure t)
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
(use-package highlight-parentheses
  :ensure t)
(use-package evil
  :ensure t)
(use-package doom-themes
  :ensure t)
(use-package highlight-parentheses
  :ensure t)
(use-package smartparens
  :ensure t)
(use-package emms
  :ensure t
  :config
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "~/media/music/")
  (setq emms-playlist-buffer-name "*Music*")
  (setq emms-info-asynchronously t)
  ;(require 'emms-info-libtag) ;;; load functions that will talk to emms-print-metadata which in turn talks to libtag and gets metadata
  (setq emms-info-functions '(emms-info-libtag)) ;;; make sure libtag is the only thing delivering metadata
  (require 'emms-mode-line)
  (emms-mode-line 1)
  (require 'emms-playing-time)
  (emms-playing-time 1))

(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
(use-package geiser
  :bind ("C-c l" . geiser-repl-clear-buffer)
  :ensure t)
(use-package magit
  :ensure t)
(use-package paredit
  :ensure t)

(use-package org-mode
  :bind (("C-c t" . org-insert-todo-heading)
	 ("C-c x" . org-toggle-checkbox)
	 ("C-c s" . org-schedule)))
(use-package pdf-tools
    :defer t
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :config
     (pdf-tools-install))

(use-package all-the-icons
  :ensure t)
(use-package elfeed
        :ensure t)
  (setq elfeed-feeds
	'("https://ww.reddit.com/r/emacs.rss"
	  "https://ww.reddit.com/r/linux.rss"
	  "https://ww.reddit.com/r/news.rss"
	  "https://ww.reddit.com/r/technology.rss"
	  "https://ww.reddit.com/r/programming.rss"
	  "https://ww.reddit.com/r/politics.rss"
	  "https://ww.reddit.com/r/italy.rss"))


#+end_src

#+begin_src emacs-lisp
;;WM keys
(load-file "~/.emacs.d/app-launcher.el")
(exwm-input-set-key (kbd "s-a") 'app-launcher-run-app)
(exwm-input-set-key (kbd "<XF86Explorer>") 'ivy-switch-buffer)
(exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") 'desktop-environment-volume-increment)
(exwm-input-set-key (kbd "<XF86AudioLowerVolume>") 'desktop-environment-volume-decrement)
(exwm-input-set-key (kbd "<XF86AudioMute>") 'desktop-environment-toggle-mute)
(exwm-input-set-key (kbd "<XF86AudioMicMute>") 'desktop-environment-toggle-microphone-mute)
(exwm-input-set-key (kbd "<XF86MonBrightnessDown>") 'desktop-environment-brightness-decrement-slowly)
(exwm-input-set-key (kbd "<XF86Search>") 'swiper)
(exwm-input-set-key (kbd "<XF86MonBrightnessUp>") 'desktop-environment-brightness-increment-slowly)
(exwm-input-set-key (kbd "s-<return>") 'ansi-term)
(exwm-input-set-key (kbd "s-d") 'dmenu)
(exwm-input-set-key (kbd "s-e <return>") 'eshell)
(exwm-input-set-key (kbd "s-e p") 'proced)
(exwm-input-set-key (kbd "s-e g") 'geiser)
(exwm-input-set-key (kbd "s-t")'exwm-layout-toggle-fullscreen)
(exwm-input-set-key (kbd "s-m") 'exwm-layout-toggle-mode-line)
(exwm-input-set-key (kbd "s-e r") 'erc)
(exwm-input-set-key (kbd "s-e f") 'elfeed)
(exwm-input-set-key (kbd "s-e m") 'emms-play-file)
(exwm-input-set-key (kbd "s-e f") 'elfeed)
(exwm-input-set-key (kbd "s-x") 'counsel-M-x)
(exwm-input-set-key (kbd "s-q") 'kill-current-buffer)
(exwm-input-set-key (kbd "s-b") 'ivy-switch-buffer)
(exwm-input-set-key (kbd "s-o") 'other-window)
(exwm-input-set-key (kbd "s-f") 'delete-other-windows)
(exwm-input-set-key (kbd "s-z") 'exwm-workspace-move-window)
(exwm-input-set-key (kbd "s-c") 'exwm-input-release-keyboard)
(exwm-input-set-key (kbd "s-SPC") 'exwm-floating-toggle-floating)
(exwm-input-set-key (kbd "<print>") 'desktop-environment-screenshot)
(display-battery-mode)
(display-time-mode)
(setq desktop-environment-screenshot-directory "~/media/pix/screens") 
(shell-command (concat "xset r rate 145 "))
(shell-command "setxkbmap -option ctrl:nocaps")
(kill-buffer "*Shell Command Output*")
(delete-other-windows)
#+end_src

#+begin_src emacs-lisp
(add-hook 'scheme-mode-hook 'paredit-mode 'highlight-parentheses-mode)
(add-hook 'scheme-mode-hook 'highlight-parentheses-mode)
(add-hook 'scheme-mode-hook 'auto-complete-mode)
(add-hook 'emacs-lisp-mode-hook 'paredit-mode 'highlight-parentheses-mode)
(add-hook 'emacs-lisp-mode-hook 'highlight-parentheses-mode)
(add-hook 'emacs-lisp-mode-hook 'auto-complete-mode)
(add-hook 'emacs-lisp-mode 'undo-tree-mode)
(add-hook 'org-mode-hook 'undo-tree-mode)
(add-hook 'scheme-mode-hook 'undo-tree-mode)
(add-hook 'text-mode-hook 'undo-tree-mode)
(add-hook 'sh-mode-hook 'undo-tree-mode)
(add-hook 'org-mode-hook (lambda ()
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" .  "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "❍" ) prettify-symbols-alist)
   (push '("#+BEGIN_SRC" . "↦" ) prettify-symbols-alist)
   (push '("#+END_SRC" . "⇤" ) prettify-symbols-alist)
   (push '("#+BEGIN_EXAMPLE" . "↦" ) prettify-symbols-alist)
   (push '("#+END_EXAMPLE" . "⇤" ) prettify-symbols-alist)
   (push '("#+BEGIN_QUOTE" . "↦" ) prettify-symbols-alist)
   (push '("#+END_QUOTE" . "⇤" ) prettify-symbols-alist)
   (push '("#+begin_quote" . "↦" ) prettify-symbols-alist)
   (push '("#+end_quote" . "⇤" ) prettify-symbols-alist)
   (push '("#+begin_example" . "↦" ) prettify-symbols-alist)
   (push '("#+end_example" . "⇤" ) prettify-symbols-alist)
   (push '("#+begin_src" . "↦" ) prettify-symbols-alist)
   (push '("#+end_src" . "⇤" ) prettify-symbols-alist)
   (prettify-symbols-mode)))
(add-hook 'exwm-mode 'exwm-input-release-keyboard)
(global-hl-line-mode +1)
#+end_src

#+begin_src emacs-lisp
(general-define-key
 :keymaps '(normal insert emacs)
 :prefix "SPC m"
 :non-normal-prefix "M-SPC"
 :prefix-command 'magit-command
 :prefix-map 'magit-map
 "RET" 'magit
 "c" 'magit-clone)

(general-define-key
 :keymaps '(normal insert emacs)
 :prefix "SPC o"
 :non-normal-prefix "M-SPC"
 :prefix-command 'org-command
 :prefix-map 'org-map
 "RET" 'org-mode
 "t" 'org-insert-todo-heading
 "x" 'org-toggle-checkbox
 "s" 'org-schedule
 "a" 'org-agenda
 "n" 'org-insert-subheading
 "p" 'org-tree-slide-mode)
 
(general-define-key
 :keymaps '(normal insert emacs)
 :prefix "SPC a"
:non-normal-prefix "M-SPC"
:prefix-command 'apps-command 
:prefix-map 'apps-map
"m" 'magit
"f" 'elfeed
"r" 'erc
"m" 'emms
"h" 'shell
"t" 'ansi-term
"g" 'geiser
"p" 'proced)

(general-define-key
:keymaps '(normal insert emacs)
:prefix "SPC l"
:non-normal-prefix "M-SPC"
:prefix-command 'lisp-command
:prefix-map 'lisp-map
"u" 'uncomment-region
"c" 'comment-region
"e" 'eval-buffer
"c" 'byte-compile-file) 

(general-define-key
:keymaps '(normal insert emacs)
:prefix "SPC f"
:non-normal-prefix "M-SPC"
:prefix-command 'files-command
:prefix-map 'files-map
"f" 'find-file
"x" 'counsel-M-x
"d" 'dired
"l" 'load-file
"s" 'save-buffer
"t" 'load-theme)

(general-define-key
:keymaps '(normal insert emacs)
:prefix "SPC b"
:non-normal-prefix "M-SPC"
:prefix-command 'buffer-command
:prefix-map 'buffer-map
"k" 'kill-current-buffer
"h" 'split-window-below
"v" 'split-window-right
"f" 'delete-other-windows
"o" 'other-window
"q" 'save-buffers-kill-terminal
"b" 'ivy-switch-buffer)

(general-define-key
:keymaps '(normal insert emacs)
:prefix "SPC h"
:non-normal-prefix "M-SPC"
:prefix-command 'help-command
:prefix-map 'help-map
"k" 'helpful-key
"v" 'helpful-variable
"f" 'helpful-function)

(general-define-key
:keymaps '(normal insert emacs)
:prefix "SPC w"
:non-normal-prefix "M-SPC"
:prefix-command 'web-command
:prefix-map 'web-map
"b" 'elfeed-search-browse-url
"g" 'elfeed-goodies/setup
"u" 'elfeed-update)
#+end_src
 
